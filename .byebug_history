c
next
result.data
result
next
update_event
next
list.data.items[0]
list.data
c
list.data.items.count
list.data.items
list.data
c
restart
list.data
list
list.data
list.data.
list.data.items
list.data.items.count
list
c
list.data.items.count
@result.data.items.count
c
@result.data.items.count
@result.data.items.ount
@result.data.items
@result.data.itms
@result.data
list.data.items.count
list.data
c
service.events.list.data
service.events.list
service.events.list.count
service.events.list
service.evvents.list
service
@result.events
@result
@result.data.items.count
c
@result.data.items[2].summary
@result.data.items
@result.data.items.count
c
@result.data.items[2]
@result.data.items[2].summary
@result.data.items[0].summary
@result.data.items[0]
@result.data.items[0].description
@result.data.items[1].description
@result.data.items[2].description
@result.data.items[2]
@result.data.items[3]
@result.data.items[2]
@result.data.item[2]
@result.data.item[3]
@result.data.items[1]
@result.data.item[1]
@result.data.items
@result.data.items.count
@result.data.count
c
@result.data.items.count
@result.data.items
@result.data
@result
service.events.list.items
service.events.list.data
service.events.list
service.events.lisy
@result
@result.e
@result.data
@result
c
next
service.calendar_list.list
service.calendar_list.get
service.calendar_list
service.list
service
@calendar_list.get
@calendar_list.events
@calendar_list.data
@calendar_list.lists
@calendar_list.list_calendar_lists
@calendar_list.class
@calendar_list
@calendar_list.items
@calendar_list.list
@calendar_list.inspect
@calendar_list
@calender_list
service.calendar_list.list
@calander_list
c
@calander.items.each do |c| {c.summarry } end
@calander.items.each do |c| {p "#{c.summary}"} end
@calander.items.each do |c| {p "#{c.summary}"}
@calander.items.map
@calander = service.calendar_list.list
service.calendar_list.list
      :headers => {'Content-Type' => 'application/json'})
      :parameters => {},
      :api_method => service.calendar_list.list,
 @result = client.execute(
 service = client.discovered_api('calendar', 'v3')
  client.authorization.access_token = @token
 client = Google::APIClient.new
@token =  env["omniauth.auth"]["credentials"]["token"]
@token =  env["omniauth.auth"]["credentials"]
@token =  env["omniauth.auth"]["credential"]
@token =  env["omniauth.auth"]["credential"]["token"]
@token =  env["omniauth.auth"]["credentail"]["token"]
@token =  env["omniauth.auth"]
next
c
env["omniauth.auth.email"]
env["omniauth.auth"]
env["omniauth.auth"]to_s
env["omniauth.auth.provider"]to_s
env["omniauth.auth.provider"]
env["omniauth.auth"]
env["omniauth"]
env["omniauth.provider"]
env["omniauth.token"]
env["omniauth.auth"]
env["omniauth.auth.token"]
auth.token
omniauth.auth.token
c
next
c
 request.env["omniauth.auth"]
next
c
identity.user.blank?
next
 auth.provider
next
c
identity
next
c
next
user.persisted?
user
next
user.id
next
auth.info.email
 auth.info.name
next
user
next
identity
next
c
Identity.where(:provider => auth.provider, :uid => auth.uid.to_s).first_or_initialize
identity
"#{TEMP_EMAIL_PREFIX}-#{auth.uid}-#{auth.provider}.com"
auth.info.email
auth.info.name
next
User.where('email = ?', auth["info"]["email"]).first
next
step
identity
next
c
next
user
next
c
 User.from_omniauth(env["omniauth.auth"], current_user)
omniauth.auth
auth
c
next
options
resource
scope
next
resource_or_scope
args.last
next
options
step
@user.persisted?
@user.persisted
@user
c
next
identity.user != user
if identity.user != user
next
user
next
user
identity.user
identity
identify
 Identity.find_for_oauth(auth)
auth
identify
signed_in_resource?
signed_in_resource
identify.user
next
 Identity.find_for_oauth(auth)
auth
